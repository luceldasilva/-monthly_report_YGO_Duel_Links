```{python}
from queries_db import show_tables, query as qu
import pyprojroot
import requests as req
from io import BytesIO
import numpy as np
import pandas as pd
import squarify
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
from matplotlib.font_manager import fontManager, FontProperties
from matplotlib.patches import FancyBboxPatch
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
import seaborn as sns
import calplot
```

```{python}
root_path = pyprojroot.here()
helvetica_path = root_path / 'fonts' / 'Helvetica.ttf'

fontManager.addfont(helvetica_path)
```

```{python}
series_query = """
SELECT * FROM series
"""

dim_series_query = qu(series_query)
dim_series_query
```

```{python}
kog_2025_jan_query = """
SELECT 
    p.nick, d.deck, s.skill, jan.ndmax,
    jan.zerotg, jan.zephra, jan.bryan,
    jan.xenoblur, jan.yamiglen, jan.latino_vania
FROM kog_2025_jan jan
INNER JOIN decks d ON jan.deck_id = d.deck_id
INNER JOIN players p ON jan.player_id = p.player_id
INNER JOIN skills s ON jan.skill_id = s.skill_id;
"""

kog_2025_jan = qu(kog_2025_jan_query)
kog_2025_jan
```


```{python}
comunidades = [
    'zerotg', 'zephra', 'bryan', 'xenoblur', 'yamiglen', 'latino_vania' 
]

melted_comunidad = kog_2025_jan.melt(
    id_vars='nick',
    value_vars=comunidades, 
    var_name='Comunidad', value_name='Jugadores'
)


pivot_comunidad = pd.pivot_table(
    melted_comunidad,
    values='Jugadores',
    index='Comunidad',
    aggfunc=lambda x: (x == True).sum()
).sort_values(by='Jugadores', ascending=False)

pivot_comunidad
```

```{python}
# Verificación si está bien la cantidad
kog_2025_jan['bryan'].sum()
```


```{python}
"""
TODO: Ver para ser del todo el año
"""

kog_date_jan_query = """
SELECT ndmax, COUNT(ndmax) AS jugadores
FROM kog_2025_jan
GROUP BY ndmax
ORDER BY ndmax;
"""

kog_date_jan = qu(kog_date_jan_query)
kog_date_jan.index = pd.to_datetime('2025-01-01') + pd.to_timedelta(kog_date_jan.index, unit='D')

calplot.calplot(
    kog_date_jan['jugadores'],
    cmap = 'Spectral_r', yearascending = False,
    suptitle='Jugadores por Día en Enero 2025',
)

plt.show()
```


```{python}
# Cuando corra la api en local
character_images = pd.read_json(
    'http://127.0.0.1:8000/characters/',
    orient='records'
)

character_images = character_images[['character_name', 'url_image']]
character_images
```


```{python}
characters_count_query = """
WITH skills_count AS (
    SELECT s.skill, s.character_id
    FROM kog_2025_jan jan
    INNER JOIN skills s ON jan.skill_id = s.skill_id
    WHERE s.character_id != -1 
)
SELECT
    c.name_character AS character_name, COUNT(*) AS total
FROM skills_count sk
INNER JOIN characters c ON sk.character_id = c.character_id
GROUP BY character_name
ORDER BY total DESC;
"""

characters_sum = qu(characters_count_query)
characters_sum = characters_sum.iloc[:5]
characters_sum
```


```{python}
characters_sum = characters_sum.merge(
    character_images, on='character_name', how='inner'
)
characters_sum.rename(columns={'character_name': 'personaje'}, inplace=True)
characters_sum
```


```{python}
avatar_character = characters_sum['url_image']
del characters_sum['url_image']
```

```{python}
# TODO: hacer más chicas las fotos para que no estén pixeleadas
plt.figure(figsize=(12, 8))


colores_verdes = plt.cm.Greens_r(np.linspace(0.2, 0.6, len(characters_sum)))

ax = sns.barplot(
    x=characters_sum.total, 
    y=characters_sum.personaje, orient='h',
    joinstyle='bevel'
)

new_patches = []
for patch, color, personaje, total, avatar in zip(
    ax.patches, colores_verdes, characters_sum['personaje'],
    characters_sum['total'], avatar_character
):
    
    bb = patch.get_bbox()
    p_bbox = FancyBboxPatch(
        (bb.xmin, bb.ymin), abs(bb.width), abs(bb.height),
        boxstyle='round,pad=-0.05,rounding_size=0.73',
        ec='none', fc=color, mutation_aspect=0.73
    )
    patch.remove()
    new_patches.append(p_bbox)
    
    response = req.get(avatar)
    image = plt.imread(BytesIO(response.content))
    imagebox = OffsetImage(image, zoom=0.35)
    ab = AnnotationBbox(
        imagebox, xy=(3.5, patch.get_y() + patch.get_height()/2),
        xybox=(0,0), xycoords='data', boxcoords="offset points",
        pad=0, arrowprops=dict(arrowstyle='-', color='none'),
        bboxprops=dict(facecolor='none', edgecolor='none')
    )
    ax.add_artist(ab)

    ax.annotate(
        f'{total}',
        xy=(patch.get_width(), patch.get_y() + patch.get_height()/2),
        xytext=(-5,0), textcoords='offset points',
        arrowprops=dict(arrowstyle='-', color='none'),
        color='white', fontweight='bold', fontsize=12, ha='right', va='center',
        xycoords='data',
        bbox=dict(facecolor='none', edgecolor='none', pad=0),
        annotation_clip=False
    )

for patch in new_patches:
    ax.add_patch(patch)

ax.set_xlabel('')
ax.set_ylabel('')
ax.set_xticks([])
ax.yaxis.grid(False)
ax.xaxis.grid(False)
ax.spines['bottom'].set_visible(False)
ax.spines['left'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)

plt.title(
    'Personajes con habilidad legendaria más usados en Enero 2025',
    fontsize=14, fontweight='bold', x=0.35
)

plt.show()
```

```{python}
decks_count_query = """
SELECT
    d.deck AS name, COUNT(*) AS total
FROM kog_2025_jan jan
INNER JOIN decks d ON jan.deck_id = d.deck_id
-- WHERE jan.zephra
GROUP BY name
ORDER BY total DESC;
"""

decks_sum = qu(decks_count_query)
decks_sum
```


```{python}
# Cuando corra la api en local
decks_images = pd.read_json(
    'http://127.0.0.1:8000/decks/',
    orient='records'
)

decks_images = decks_images[['name', 'url_image']]
decks_images
```

```{python}
decks_sum.iloc[:10]
```

```{python}
decks_sum = decks_sum.iloc[:5]
decks_sum = decks_sum.merge(
    decks_images, on='name', how='inner'
)
decks_sum.rename(columns={'name': 'deck'}, inplace=True)
decks_sum
```


```{python}
avatar_deck = decks_sum['url_image']
del decks_sum['url_image']
```


```{python}
# TODO: hacer un color el primero y el resto otro
plt.figure(figsize=(6, 4))


colores_verdes = plt.cm.Greens_r(np.linspace(0.2, 0.6, len(decks_sum)))

ax = sns.barplot(
    x=decks_sum.total, 
    y=decks_sum.deck, orient='h',
    joinstyle='bevel'
)

new_patches = []
for patch, color, deck, total, avatar in zip(
    ax.patches, colores_verdes, decks_sum['deck'],
    decks_sum['total'], avatar_deck
):
    
    bb = patch.get_bbox()
    p_bbox = FancyBboxPatch(
        (bb.xmin, bb.ymin), abs(bb.width), abs(bb.height),
        boxstyle='round,pad=-0.05,rounding_size=0.73',
        ec='none', fc=color, mutation_aspect=0.73
    )
    patch.remove()
    new_patches.append(p_bbox)
    
    response = req.get(avatar)
    image = plt.imread(BytesIO(response.content))
    imagebox = OffsetImage(image, zoom=0.8)
    ab = AnnotationBbox(
        imagebox, xy=(4.35, patch.get_y() + patch.get_height()/2),
        xybox=(0,0), xycoords='data', boxcoords="offset points",
        pad=0, arrowprops=dict(arrowstyle='-', color='none'),
        bboxprops=dict(facecolor='none', edgecolor='none')
    )
    ax.add_artist(ab)

    ax.annotate(
        f'{total}',
        xy=(patch.get_width(), patch.get_y() + patch.get_height()/2),
        xytext=(-5,0), textcoords='offset points',
        arrowprops=dict(arrowstyle='-', color='none'),
        color='white', fontweight='bold', fontsize=12, ha='right', va='center',
        xycoords='data',
        bbox=dict(facecolor='none', edgecolor='none', pad=0),
        annotation_clip=False
    )

for patch in new_patches:
    ax.add_patch(patch)

ax.set_xlabel('')
ax.set_ylabel('')
ax.set_xticks([])
ax.yaxis.grid(False)
ax.xaxis.grid(False)
ax.spines['bottom'].set_visible(False)
ax.spines['left'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)

plt.title(
    'Mazos más usados en Enero 2025',
    fontsize=14, fontweight='bold', x=0.35
)

plt.show()
```

```{python}
"""
TODO: nube de palabras de mazos que no son el top 5
"""
# TODO: hacer más hd las miniaturas del top 5 como el 
stratos
```